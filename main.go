package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	if len(os.Args) < 4 {
		fmt.Println("example: go-embed package output.go x.txt x.exe x.html")
		return
	}

	filename := os.Args[2]
	pkgName := os.Args[1]
	out := bytes.NewBufferString("// Code generated by go-embed.\n\npackage " + pkgName + "\n\n")
	for _, arg := range os.Args[3:] {
		if r := convert(arg); r != "" {
			out.WriteString(r)
		}
	}

	_ = ioutil.WriteFile(filename, out.Bytes(), 0666)
}

// convert file as: var _xxxDll = []byte("\x4d\x5a...")
func convert(file string) string {
	var buf bytes.Buffer
	filename := filepath.Base(file)
	bn := strings.ToLower(filename)

	if strings.HasPrefix(bn, ".") {
		return ""
	}
	bn = strings.TrimRight("_"+bn, ".")
	n := strings.Index(bn, ".")
	if n != -1 {
		ext := filepath.Ext(bn)
		ext = strings.TrimLeft(ext, ".")
		bn = bn[:n] + strings.Title(ext)
	}

	_, _ = fmt.Fprintf(&buf, "// %s from %s\nvar %s = []byte(\"", bn, filename, bn)
	data, err := ioutil.ReadFile(file)
	if err != nil {
		panic(err)
	}

	for n, i := len(data), 0; i < n; i++ {
		_, _ = fmt.Fprintf(&buf, "\\x%02x", data[i])
	}
	_, _ = buf.WriteString("\")\n\n")
	return buf.String()
}
